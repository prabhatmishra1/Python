"""
You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.

Example 1:

Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.
Example 2:

Input: s = "", t = "y"
Output: "y"


Constraints:

0 <= s.length <= 1000
t.length == s.length + 1
s and t consist of lowercase English letters.
"""



"""
Solution: To solve this there are multiple approach we solve accordingly
Note: If you think to compare the string then it won't work because same string can exists twice
s = a
t = aa

so if you'll compare the it will found the match but as we can t has extra 'a'
"""

class Solution:
    # First Approach: Using for loop
    def find_the_difference(self, s: str, t: str) -> str:
        """
        STEP-1: Sort both the strings
        STEP-2: Compare the strings using two pointer or use for loop
        STEP-3: If strings does not match then return the char from t
        STEP-4: If string completed then the last char will not match
        STEP-5: Return the string
        """
        # Check if s has value or not?
        if not s:
            return t
        # STEP-1: Sort the strings
        sorted_s = "".join(sorted(s))
        sorted_t = "".join(sorted(t))
        # Now run the for loop can compare the strings
        for index in range(len(sorted_s)):
            if sorted_s[index] != sorted_t[index]:
                return sorted_t[index]
        # It means loop has been completed and last element of t is extra
        else:
              return sorted_t[index+1:]
    # Second Approach: Using while loop
    def find_the_difference(self, s: str, t: str) -> str:
        """
        STEP-1: Sort both the strings
        STEP-2: Compare the strings using two pointer or use for loop
        STEP-3: If strings does not match then return the char from t
        STEP-4: If string completed then the last char will not match
        STEP-5: Return the string
        """
        # Check if s has value or not?
        if not s:
            return t

        # STEP-1: Sort the strings
        sorted_s = "".join(sorted(s))
        sorted_t = "".join(sorted(t))

        # Use the while loop
        i, j = 0, 0
        len_s = len(s)
        len_t = len(t)
        while i < len_s:
            if sorted_s[i] != sorted_t[i]:
                print(sorted_s[i])
                return sorted_t[i]
            i+=1
        else:
            return sorted_t[i]

    # Third Approach: Using Hashing
    def find_the_difference(self, s: str, t: str) -> str:
        # Compare the S string one by one to string S
        """
        STEP-1: Get the counter of both the string
        STEP-2: Start the for loop and with dict_t key and check the count with dict_s
        STEP-3: Get the and and compare the value
        STEP-4: That extra count will not be having the same count as in dict_t
        STEP-5: Return the string
        """
        # Check if s has value or not?
        if not s:
            return t

         # STEP-1: Convert the string to hash counter
        from collections import Counter
        dict_s = Counter(s)
        dict_t = Counter(t)

        # STEP-2: Run the loop and match the key and count
        for key, value in dict_t.items():
             if not(dict_s.get(key) and dict_s.get(key) == value):
                 return key

    # Forth Approach: Using ASCII value
    def find_the_difference(self, s: str, t: str) -> str:
        # Sum of ASCII value s - SUM of ASCII value t will the extra exact ASCII value
        """
        STEP-1: Get the SUM ASCII for S and T and convert char to ASCII use ord function
        STEP-2: SUM of ASCII t - SUM of ASCII s
        STEP-3: It will return the exact value
        STEP-4: Convert the ASCII to char user chr function
        STEP-5: Return the string
        """
        sum_s = sum(ord(char) for char in s)
        sum_t = sum(ord(char) for char in t)

        return chr(sum_t-sum_s)



if __name__ == "__main__":
    obj = Solution()
    inputs = [("abc", "abcd"), ("a", "aa"), ("", "a")]
    for input in inputs:
        # print(input)
        print(obj.find_the_difference(*input))


